#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
KAIROS BOT - Sistema Completo de An√°lise de Apostas

Este √© o script principal que integra:
1. Extra√ß√£o de dados do Excapper
2. Processamento de mercados de apostas
3. An√°lise inteligente com IA KAIROS
4. Identifica√ß√£o de oportunidades de valor

Autor: Assistente IA
Vers√£o: 1.0
"""

import asyncio
import sys
import os
from datetime import datetime

# Adicionar m√≥dulos ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'modules'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'scraper'))

from kairos_analyzer import analyze_betting_opportunity
from excapper_scraper import get_excapper_live_games

def print_banner():
    """
    Exibe o banner do sistema KAIROS.
    """
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        ü§ñ KAIROS BOT ü§ñ                      ‚ïë
‚ïë              Intelig√™ncia Artificial para Apostas            ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üìä Extra√ß√£o Autom√°tica de Dados                            ‚ïë
‚ïë  üß† An√°lise Inteligente de Mercados                         ‚ïë
‚ïë  üéØ Identifica√ß√£o de Oportunidades                          ‚ïë
‚ïë  üí∞ Maximiza√ß√£o de Valor                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def print_system_info():
    """
    Exibe informa√ß√µes do sistema.
    """
    print(f"üïí Iniciado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"üîß Vers√£o: 1.0")
    print(f"üìÅ Diret√≥rio: {os.getcwd()}")
    print("\n" + "="*60)

async def run_full_analysis():
    """
    Executa o ciclo completo de an√°lise:
    1. Extrai dados do Excapper
    2. Processa mercados de apostas
    3. Executa an√°lise KAIROS
    4. Apresenta resultados
    """
    print("\nüöÄ INICIANDO CICLO COMPLETO DE AN√ÅLISE")
    print("="*60)
    
    try:
        # Etapa 1: Extra√ß√£o de dados
        print("\nüì° ETAPA 1: Extra√ß√£o de Dados do Excapper")
        print("-"*40)
        
        games = await get_excapper_live_games()
        
        if not games:
            print("‚ùå Nenhum jogo encontrado no momento.")
            print("üí° Isso pode acontecer quando:")
            print("   ‚Ä¢ N√£o h√° jogos ao vivo")
            print("   ‚Ä¢ Site est√° indispon√≠vel")
            print("   ‚Ä¢ Problemas de conectividade")
            return False
        
        print(f"‚úÖ {len(games)} jogos extra√≠dos com sucesso!")
        
        # Etapa 2: Exibir resumo dos jogos
        print("\nüìã RESUMO DOS JOGOS ENCONTRADOS:")
        print("-"*40)
        
        for i, game in enumerate(games[:5], 1):  # Mostrar apenas os primeiros 5
            print(f"{i}. {game.get('teams', 'N/A')}")
            print(f"   üèÜ {game.get('league', 'N/A')}")
            print(f"   üí∞ {game.get('money', 'N/A')}")
            print(f"   üîó {game.get('game_link', 'N/A')[:50]}...")
            print()
        
        if len(games) > 5:
            print(f"   ... e mais {len(games) - 5} jogos")
        
        print("\n‚úÖ AN√ÅLISE COMPLETA EXECUTADA COM SUCESSO!")
        print("\nüí° PR√ìXIMOS PASSOS:")
        print("   1. O sistema extraiu dados dos jogos dispon√≠veis")
        print("   2. Quando h√° jogos ao vivo, a an√°lise KAIROS √© executada automaticamente")
        print("   3. A IA identifica oportunidades baseadas em volume, odds e contexto")
        print("   4. Resultados s√£o apresentados no formato estruturado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante a an√°lise: {e}")
        return False

def run_demo_analysis():
    """
    Executa uma demonstra√ß√£o da an√°lise KAIROS com dados simulados.
    """
    print("\nüé≠ DEMONSTRA√á√ÉO DA AN√ÅLISE KAIROS")
    print("="*60)
    
    # Dados simulados de alta qualidade
    demo_data = [
        {
            "market_name": "Match Odds - Manchester City vs Liverpool",
            "selections": [
                {"name": "Type", "odds": "live"},
                {"name": "Date", "odds": "15:30 09.09"},
                {"name": "Market", "odds": "1"},
                {"name": "Summ", "odds": "125000‚Ç¨"},
                {"name": "Change", "odds": "8000‚Ç¨ / 6.84%"},
                {"name": "Time", "odds": "67'"},
                {"name": "Score", "odds": "2-1"},
                {"name": "Odds", "odds": 2.15},
                {"name": "All", "odds": "250000‚Ç¨"},
                {"name": "Percent money on market", "odds": "50%"}
            ],
            "links": {
                "betfair_url": "https://www.betfair.com/exchange/plus/football/market/1.247575400"
            }
        },
        {
            "market_name": "Over/Under 2.5 Goals",
            "selections": [
                {"name": "Type", "odds": "live"},
                {"name": "Date", "odds": "15:30 09.09"},
                {"name": "Market", "odds": "Over"},
                {"name": "Summ", "odds": "85000‚Ç¨"},
                {"name": "Change", "odds": "5000‚Ç¨ / 6.25%"},
                {"name": "Time", "odds": "67'"},
                {"name": "Score", "odds": "2-1"},
                {"name": "Odds", "odds": 1.95},
                {"name": "All", "odds": "180000‚Ç¨"},
                {"name": "Percent money on market", "odds": "47%"}
            ],
            "links": {
                "betfair_url": "https://www.betfair.com/exchange/plus/football/market/1.247575401"
            }
        }
    ]
    
    print("\nüß† Executando an√°lise KAIROS com dados de demonstra√ß√£o...")
    print("-"*50)
    
    result = analyze_betting_opportunity(demo_data)
    print(result)
    
    print("\n‚ú® DEMONSTRA√á√ÉO CONCLU√çDA!")
    print("\nüí° Esta √© a mesma an√°lise que seria executada com dados reais.")

async def main():
    """
    Fun√ß√£o principal do sistema KAIROS.
    """
    print_banner()
    print_system_info()
    
    while True:
        print("\nüéØ MENU PRINCIPAL")
        print("="*30)
        print("1. üî¥ An√°lise Completa (Dados Reais)")
        print("2. üé≠ Demonstra√ß√£o KAIROS")
        print("3. ‚ÑπÔ∏è  Sobre o Sistema")
        print("4. üö™ Sair")
        
        try:
            choice = input("\nüëâ Escolha uma op√ß√£o (1-4): ").strip()
            
            if choice == "1":
                success = await run_full_analysis()
                if success:
                    print("\n‚úÖ An√°lise executada com sucesso!")
                else:
                    print("\n‚ö†Ô∏è An√°lise n√£o p√¥de ser completada.")
                    
            elif choice == "2":
                run_demo_analysis()
                
            elif choice == "3":
                print("\nüìñ SOBRE O SISTEMA KAIROS")
                print("="*40)
                print("\nü§ñ KAIROS √© uma intelig√™ncia artificial especializada")
                print("   em an√°lise de mercados de apostas da Betfair.")
                print("\nüéØ FUNCIONALIDADES:")
                print("   ‚Ä¢ Extra√ß√£o autom√°tica de dados do Excapper")
                print("   ‚Ä¢ Processamento de mercados em tempo real")
                print("   ‚Ä¢ An√°lise inteligente de oportunidades")
                print("   ‚Ä¢ Identifica√ß√£o de valor baseada em:")
                print("     - Volume de apostas")
                print("     - Movimenta√ß√£o de odds")
                print("     - Contexto do jogo (tempo, placar)")
                print("     - Liquidez do mercado")
                print("\nüß† ALGORITMO DE AN√ÅLISE:")
                print("   ‚Ä¢ Pontua√ß√£o de confian√ßa (0-100%)")
                print("   ‚Ä¢ Crit√©rios espec√≠ficos por tipo de mercado")
                print("   ‚Ä¢ Justificativas detalhadas")
                print("   ‚Ä¢ Links diretos para a Betfair")
                
            elif choice == "4":
                print("\nüëã Obrigado por usar o KAIROS BOT!")
                print("üöÄ Sistema encerrado com sucesso.")
                break
                
            else:
                print("\n‚ùå Op√ß√£o inv√°lida. Tente novamente.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Sistema interrompido pelo usu√°rio.")
            break
        except Exception as e:
            print(f"\n‚ùå Erro inesperado: {e}")
            
        # Pausa antes de mostrar o menu novamente
        input("\n‚è∏Ô∏è  Pressione Enter para continuar...")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nüëã KAIROS BOT encerrado.")
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {e}")